{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"vREYGT5OqpyE","executionInfo":{"status":"ok","timestamp":1753835778925,"user_tz":240,"elapsed":4,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["# ─────────────────────────────────────────────────────────────────────────────\n","# Instalación del paquete necesario para diagramas de Venn\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Instala la biblioteca 'matplotlib-venn' desde el repositorio PyPI.\n","# Esta librería extiende matplotlib y permite crear diagramas de Venn para 2 o 3 conjuntos.\n","# Los diagramas de Venn son útiles para visualizar intersecciones, uniones y diferencias entre conjuntos.\n","# El prefijo \"!\" permite ejecutar comandos del sistema operativo desde un notebook (como Google Colab).\n","!pip install matplotlib-venn\n","\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# Instalación de pyFluidSynth desde PyPI\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Instala la biblioteca 'pyfluidsynth', una interfaz Python para la librería FluidSynth.\n","# Permite generar sonidos sintetizados, útil en procesamiento de MIDI o creación de música programática.\n","# Esta versión no requiere instalar 'libfluidsynth1' vía APT, lo que facilita su uso en entornos como Colab.\n","!pip install pyfluidsynth\n","\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# (Línea repetida por error) Reinstalación de 'matplotlib-venn'\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Vuelve a instalar 'matplotlib-venn'. Esta línea parece redundante.\n","# Si ya fue instalada arriba, no es necesario ejecutarla de nuevo.\n","# Puede eliminarse o comentarse sin afectar el funcionamiento del código.\n","!pip install matplotlib-venn\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BvwQjpNLn5e4","executionInfo":{"status":"ok","timestamp":1753835795837,"user_tz":240,"elapsed":16901,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"f27bf25d-0b9b-4664-d4a0-d26f9dd158bb"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib-venn in /usr/local/lib/python3.11/dist-packages (1.1.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (3.10.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (1.16.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (4.59.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (25.0)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (11.3.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (2.9.0.post0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->matplotlib-venn) (1.17.0)\n","Requirement already satisfied: pyfluidsynth in /usr/local/lib/python3.11/dist-packages (1.3.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from pyfluidsynth) (2.0.2)\n","Requirement already satisfied: matplotlib-venn in /usr/local/lib/python3.11/dist-packages (1.1.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (3.10.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (1.16.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (4.59.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (25.0)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (11.3.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (2.9.0.post0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->matplotlib-venn) (1.17.0)\n"]}]},{"cell_type":"code","execution_count":43,"metadata":{"id":"6mvPxlwnXRFd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753835796343,"user_tz":240,"elapsed":516,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"64c0fb70-0138-4265-bb65-14acfe22d39d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Descargando el archivo desde: https://raw.githubusercontent.com/GuidoRiosCiaffaroni/ProcesamientoDeDatos/main/csv/kc_house_data.csv\n","--2025-07-30 00:36:35--  https://raw.githubusercontent.com/GuidoRiosCiaffaroni/ProcesamientoDeDatos/main/csv/kc_house_data.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2515206 (2.4M) [text/plain]\n","Saving to: ‘kc_house_data.csv.1’\n","\n","kc_house_data.csv.1 100%[===================>]   2.40M  --.-KB/s    in 0.1s    \n","\n","2025-07-30 00:36:35 (23.0 MB/s) - ‘kc_house_data.csv.1’ saved [2515206/2515206]\n","\n","\n","Contenido del directorio actual:\n","-rw-r--r-- 1 root root 2.4M Jul 30 00:33 kc_house_data.csv\n"]}],"source":["# ─────────────────────────────────────────────────────────────────────────────\n","# Paso 1: Definición de la URL del archivo CSV en formato \"raw\" de GitHub\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Esta es la dirección directa al archivo CSV alojado en GitHub, en modo \"raw\"\n","# Es decir, permite descargar el archivo de forma directa sin interfaz web\n","csv_raw_url = \"https://raw.githubusercontent.com/GuidoRiosCiaffaroni/ProcesamientoDeDatos/main/csv/kc_house_data.csv\"\n","\n","# Imprime la URL del archivo que se descargará\n","print(f\"Descargando el archivo desde: {csv_raw_url}\")\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# Paso 2: Descarga del archivo CSV desde la URL usando wget\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Ejecuta el comando wget desde la línea de comandos para descargar el archivo CSV\n","# El signo \"!\" permite ejecutar comandos de shell dentro del notebook de Colab\n","!wget {csv_raw_url}\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# Paso 3: Verificación del archivo descargado\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Muestra un mensaje indicando que se listará el contenido del directorio actual\n","print(\"\\nContenido del directorio actual:\")\n","\n","# Lista los archivos del directorio actual con formato legible por humanos (-lh)\n","# Verifica que el archivo 'kc_house_data.csv' se haya descargado correctamente\n","!ls -lh kc_house_data.csv\n"]},{"cell_type":"code","source":["# ────────────────────────────────────────────────────────────────\n","# Importación de librerías esenciales para análisis de datos y visualización\n","# ────────────────────────────────────────────────────────────────\n","\n","# Importa la librería 'pandas' y la asigna como 'pd'\n","# 'pandas' es utilizada para manipulación, limpieza y análisis de datos estructurados (tablas, CSV, Excel, etc.)\n","import pandas as pd\n","\n","# Importa la librería de visualización 'matplotlib.pyplot' y la asigna como 'plt'\n","# Permite crear gráficos básicos como líneas, barras, histogramas y diagramas personalizados\n","import matplotlib.pyplot as plt\n","\n","# Importa la librería 'seaborn' como 'sns'\n","# 'seaborn' es una extensión de matplotlib que facilita la creación de gráficos estadísticos con mejor estética\n","import seaborn as sns\n","\n","\n","# ────────────────────────────────────────────────────────────────\n","# Configuración de estilo gráfico opcional\n","# ────────────────────────────────────────────────────────────────\n","\n","# Establece el estilo gráfico de seaborn para que los gráficos tengan mejor presentación visual\n","sns.set(style=\"whitegrid\")\n","\n","# Configura matplotlib para que los gráficos se muestren directamente en el notebook\n","%matplotlib inline\n","\n","\n"],"metadata":{"id":"UlIFkvvQht81","executionInfo":{"status":"ok","timestamp":1753835796401,"user_tz":240,"elapsed":39,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["# ─────────────────────────────────────────────────────────────────────\n","# Paso 1: Cargar el archivo CSV en un DataFrame de pandas\n","# ─────────────────────────────────────────────────────────────────────\n","\n","# Define la ruta local del archivo CSV previamente descargado\n","# En Google Colab, '/content/' es la carpeta raíz por defecto del entorno de ejecución\n","file_path = \"/content/kc_house_data.csv\"\n","\n","# Usa la función read_csv() de pandas para leer el archivo y cargarlo en un DataFrame llamado 'df'\n","df = pd.read_csv(file_path)\n","\n","# ─────────────────────────────────────────────────────────────────────\n","# Paso 2: Inspección inicial del DataFrame\n","# ─────────────────────────────────────────────────────────────────────\n","\n","# Muestra las primeras 5 filas del DataFrame\n","# Esto permite revisar rápidamente la estructura de los datos: columnas, tipos de variables y ejemplos de valores\n","df.head()\n","\n","# ─────────────────────────────────────────────────────────────────────\n","# Paso 3: Resumen general del dataset (complementario)\n","# ─────────────────────────────────────────────────────────────────────\n","\n","# Muestra información resumida del DataFrame, incluyendo número de filas, columnas, tipos de datos y memoria usada\n","df.info()\n","\n","# Muestra estadísticas descriptivas básicas para columnas numéricas (conteo, media, desviación estándar, etc.)\n","df.describe()\n","\n","# Lista los nombres de todas las columnas disponibles\n","print(\"Columnas disponibles en el DataFrame:\")\n","print(df.columns.tolist())\n","\n","# Revisa si existen valores nulos en alguna columna\n","print(\"\\nValores nulos por columna:\")\n","print(df.isnull().sum())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N2C8hFXVnBls","executionInfo":{"status":"ok","timestamp":1753835796452,"user_tz":240,"elapsed":59,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"d56bc856-6e06-46a1-d644-e5e613c52803"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 21613 entries, 0 to 21612\n","Data columns (total 21 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   id             21613 non-null  int64  \n"," 1   date           21613 non-null  object \n"," 2   price          21613 non-null  float64\n"," 3   bedrooms       21613 non-null  int64  \n"," 4   bathrooms      21613 non-null  float64\n"," 5   sqft_living    21613 non-null  int64  \n"," 6   sqft_lot       21613 non-null  int64  \n"," 7   floors         21613 non-null  float64\n"," 8   waterfront     21613 non-null  int64  \n"," 9   view           21613 non-null  int64  \n"," 10  condition      21613 non-null  int64  \n"," 11  grade          21613 non-null  int64  \n"," 12  sqft_above     21613 non-null  int64  \n"," 13  sqft_basement  21613 non-null  int64  \n"," 14  yr_built       21613 non-null  int64  \n"," 15  yr_renovated   21613 non-null  int64  \n"," 16  zipcode        21613 non-null  int64  \n"," 17  lat            21613 non-null  float64\n"," 18  long           21613 non-null  float64\n"," 19  sqft_living15  21613 non-null  int64  \n"," 20  sqft_lot15     21613 non-null  int64  \n","dtypes: float64(5), int64(15), object(1)\n","memory usage: 3.5+ MB\n","Columnas disponibles en el DataFrame:\n","['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15']\n","\n","Valores nulos por columna:\n","id               0\n","date             0\n","price            0\n","bedrooms         0\n","bathrooms        0\n","sqft_living      0\n","sqft_lot         0\n","floors           0\n","waterfront       0\n","view             0\n","condition        0\n","grade            0\n","sqft_above       0\n","sqft_basement    0\n","yr_built         0\n","yr_renovated     0\n","zipcode          0\n","lat              0\n","long             0\n","sqft_living15    0\n","sqft_lot15       0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# ─────────────────────────────────────────────────────────────────────────────\n","# FUNCIÓN: analisis_inicial()\n","# Descripción: Realiza un análisis exploratorio básico sobre un DataFrame.\n","# Incluye estructura, valores nulos, estadísticas descriptivas,\n","# histograma de precios y matriz de correlación. Guarda gráficos como PNG.\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","def analisis_inicial(df):\n","    # Diccionario para almacenar los resultados del análisis\n","    resultados = {}\n","\n","    # ───────────── 1. Dimensiones y tipos de columnas ─────────────\n","    resultados['shape'] = df.shape\n","    resultados['column_types'] = df.dtypes\n","\n","    # ───────────── 2. Conteo de valores nulos ─────────────\n","    resultados['missing_values'] = df.isnull().sum()\n","\n","    # ───────────── 3. Estadísticas descriptivas ─────────────\n","    resultados['describe'] = df.describe()\n","\n","    # ───────────── 4. Histograma de precios ─────────────\n","    if 'price' in df.columns:\n","        plt.figure(figsize=(10, 5))\n","        sns.histplot(df['price'], bins=50, kde=True, color=\"skyblue\")\n","        plt.title('Distribución de Precios de Viviendas')\n","        plt.xlabel('Precio')\n","        plt.ylabel('Frecuencia')\n","        plt.tight_layout()\n","        plt.savefig(\"/content/histograma_precios.png\")\n","        plt.close()\n","    else:\n","        print(\"⚠️ Advertencia: La columna 'price' no existe en el DataFrame.\")\n","\n","    # ───────────── 5. Matriz de correlación ─────────────\n","    corr = df.corr(numeric_only=True)\n","    if not corr.empty:\n","        plt.figure(figsize=(12, 10))\n","        sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\", square=True)\n","        plt.title('Matriz de Correlación entre Variables Numéricas')\n","        plt.tight_layout()\n","        plt.savefig(\"/content/matriz_correlacion.png\")\n","        plt.close()\n","    else:\n","        print(\"⚠️ Advertencia: No hay columnas numéricas para calcular la correlación.\")\n","\n","    return resultados\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# EJECUCIÓN DEL ANÁLISIS EXPLORATORIO SOBRE EL DATAFRAME 'df'\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Ejecuta la función de análisis y guarda los resultados en un diccionario\n","resultados_eda = analisis_inicial(df)\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# VISUALIZACIÓN DE RESULTADOS EN CONSOLA (sin ace_tools)\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Imprime estadísticas descriptivas de columnas numéricas\n","print(\"📊 Estadísticas descriptivas:\")\n","print(resultados_eda[\"describe\"])\n","\n","# Imprime cantidad de valores nulos por columna\n","print(\"\\n🧯 Valores nulos por columna:\")\n","print(resultados_eda[\"missing_values\"])\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cf5WKrL6nOvQ","executionInfo":{"status":"ok","timestamp":1753835858782,"user_tz":240,"elapsed":1774,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"faa95212-03b9-4c0c-c610-1bd7fdb0cf0d"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["📊 Estadísticas descriptivas:\n","                 id         price      bedrooms     bathrooms   sqft_living  \\\n","count  2.161300e+04  2.161300e+04  21613.000000  21613.000000  21613.000000   \n","mean   4.580302e+09  5.400881e+05      3.370842      2.114757   2079.899736   \n","std    2.876566e+09  3.671272e+05      0.930062      0.770163    918.440897   \n","min    1.000102e+06  7.500000e+04      0.000000      0.000000    290.000000   \n","25%    2.123049e+09  3.219500e+05      3.000000      1.750000   1427.000000   \n","50%    3.904930e+09  4.500000e+05      3.000000      2.250000   1910.000000   \n","75%    7.308900e+09  6.450000e+05      4.000000      2.500000   2550.000000   \n","max    9.900000e+09  7.700000e+06     33.000000      8.000000  13540.000000   \n","\n","           sqft_lot        floors    waterfront          view     condition  \\\n","count  2.161300e+04  21613.000000  21613.000000  21613.000000  21613.000000   \n","mean   1.510697e+04      1.494309      0.007542      0.234303      3.409430   \n","std    4.142051e+04      0.539989      0.086517      0.766318      0.650743   \n","min    5.200000e+02      1.000000      0.000000      0.000000      1.000000   \n","25%    5.040000e+03      1.000000      0.000000      0.000000      3.000000   \n","50%    7.618000e+03      1.500000      0.000000      0.000000      3.000000   \n","75%    1.068800e+04      2.000000      0.000000      0.000000      4.000000   \n","max    1.651359e+06      3.500000      1.000000      4.000000      5.000000   \n","\n","              grade    sqft_above  sqft_basement      yr_built  yr_renovated  \\\n","count  21613.000000  21613.000000   21613.000000  21613.000000  21613.000000   \n","mean       7.656873   1788.390691     291.509045   1971.005136     84.402258   \n","std        1.175459    828.090978     442.575043     29.373411    401.679240   \n","min        1.000000    290.000000       0.000000   1900.000000      0.000000   \n","25%        7.000000   1190.000000       0.000000   1951.000000      0.000000   \n","50%        7.000000   1560.000000       0.000000   1975.000000      0.000000   \n","75%        8.000000   2210.000000     560.000000   1997.000000      0.000000   \n","max       13.000000   9410.000000    4820.000000   2015.000000   2015.000000   \n","\n","            zipcode           lat          long  sqft_living15     sqft_lot15  \n","count  21613.000000  21613.000000  21613.000000   21613.000000   21613.000000  \n","mean   98077.939805     47.560053   -122.213896    1986.552492   12768.455652  \n","std       53.505026      0.138564      0.140828     685.391304   27304.179631  \n","min    98001.000000     47.155900   -122.519000     399.000000     651.000000  \n","25%    98033.000000     47.471000   -122.328000    1490.000000    5100.000000  \n","50%    98065.000000     47.571800   -122.230000    1840.000000    7620.000000  \n","75%    98118.000000     47.678000   -122.125000    2360.000000   10083.000000  \n","max    98199.000000     47.777600   -121.315000    6210.000000  871200.000000  \n","\n","🧯 Valores nulos por columna:\n","id               0\n","date             0\n","price            0\n","bedrooms         0\n","bathrooms        0\n","sqft_living      0\n","sqft_lot         0\n","floors           0\n","waterfront       0\n","view             0\n","condition        0\n","grade            0\n","sqft_above       0\n","sqft_basement    0\n","yr_built         0\n","yr_renovated     0\n","zipcode          0\n","lat              0\n","long             0\n","sqft_living15    0\n","sqft_lot15       0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# ───────────────────────────────────────────────────────────────\n","# Librerías necesarias\n","# ───────────────────────────────────────────────────────────────\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Estilo visual de seaborn\n","sns.set(style=\"whitegrid\")\n","%matplotlib inline\n","\n","# ───────────────────────────────────────────────────────────────\n","# FUNCIÓN: listar_columnas()\n","# Lista e imprime todas las columnas de un DataFrame.\n","# ───────────────────────────────────────────────────────────────\n","\n","def listar_columnas(df):\n","    \"\"\"\n","    Lista y muestra todas las columnas del DataFrame.\n","\n","    Parámetro:\n","    - df : pandas.DataFrame\n","\n","    Retorna:\n","    - list : Lista con los nombres de las columnas\n","    \"\"\"\n","    columnas = df.columns.tolist()\n","    print(\" Columnas disponibles en el DataFrame:\")\n","    for i, col in enumerate(columnas, start=1):\n","        print(f\"{i}. {col}\")\n","    return columnas\n","\n","# ───────────────────────────────────────────────────────────────\n","# Cargar archivo CSV (asegúrate de haberlo descargado antes)\n","# ───────────────────────────────────────────────────────────────\n","#file_path = \"/content/kc_house_data.csv\"\n","#df = pd.read_csv(file_path)\n","\n","\n","# ───────────────────────────────────────────────────────────────\n","# Listar columnas del DataFrame\n","# ───────────────────────────────────────────────────────────────\n","_ = listar_columnas(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5a2VoDXMuTHF","executionInfo":{"status":"ok","timestamp":1753835874555,"user_tz":240,"elapsed":19,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"3450f378-69a9-4d72-ef8f-03f71d3b3c19"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":[" Columnas disponibles en el DataFrame:\n","1. id\n","2. date\n","3. price\n","4. bedrooms\n","5. bathrooms\n","6. sqft_living\n","7. sqft_lot\n","8. floors\n","9. waterfront\n","10. view\n","11. condition\n","12. grade\n","13. sqft_above\n","14. sqft_basement\n","15. yr_built\n","16. yr_renovated\n","17. zipcode\n","18. lat\n","19. long\n","20. sqft_living15\n","21. sqft_lot15\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"phs1Ihkdw7j-"},"execution_count":null,"outputs":[]}]}