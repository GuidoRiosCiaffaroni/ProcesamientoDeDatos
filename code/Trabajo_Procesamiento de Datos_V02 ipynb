{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"vREYGT5OqpyE","executionInfo":{"status":"ok","timestamp":1753839226344,"user_tz":240,"elapsed":22,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["# ─────────────────────────────────────────────────────────────────────────────\n","# Instalación del paquete necesario para diagramas de Venn\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Instala la biblioteca 'matplotlib-venn' desde el repositorio PyPI.\n","# Esta librería extiende matplotlib y permite crear diagramas de Venn para 2 o 3 conjuntos.\n","# Los diagramas de Venn son útiles para visualizar intersecciones, uniones y diferencias entre conjuntos.\n","# El prefijo \"!\" permite ejecutar comandos del sistema operativo desde un notebook (como Google Colab).\n","!pip install matplotlib-venn\n","\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# Instalación de pyFluidSynth desde PyPI\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Instala la biblioteca 'pyfluidsynth', una interfaz Python para la librería FluidSynth.\n","# Permite generar sonidos sintetizados, útil en procesamiento de MIDI o creación de música programática.\n","# Esta versión no requiere instalar 'libfluidsynth1' vía APT, lo que facilita su uso en entornos como Colab.\n","!pip install pyfluidsynth\n","\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# (Línea repetida por error) Reinstalación de 'matplotlib-venn'\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Vuelve a instalar 'matplotlib-venn'. Esta línea parece redundante.\n","# Si ya fue instalada arriba, no es necesario ejecutarla de nuevo.\n","# Puede eliminarse o comentarse sin afectar el funcionamiento del código.\n","!pip install matplotlib-venn\n"],"metadata":{"id":"BvwQjpNLn5e4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753839255950,"user_tz":240,"elapsed":29601,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"07b1fbc8-de9f-426a-f36f-298aa650c985"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib-venn in /usr/local/lib/python3.11/dist-packages (1.1.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (3.10.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (1.16.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (4.59.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (25.0)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (11.3.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (2.9.0.post0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->matplotlib-venn) (1.17.0)\n","Requirement already satisfied: pyfluidsynth in /usr/local/lib/python3.11/dist-packages (1.3.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from pyfluidsynth) (2.0.2)\n","Requirement already satisfied: matplotlib-venn in /usr/local/lib/python3.11/dist-packages (1.1.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (3.10.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from matplotlib-venn) (1.16.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (4.59.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (25.0)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (11.3.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->matplotlib-venn) (2.9.0.post0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->matplotlib-venn) (1.17.0)\n"]}]},{"cell_type":"code","execution_count":55,"metadata":{"id":"6mvPxlwnXRFd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753839256599,"user_tz":240,"elapsed":651,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"bc0e417a-0785-4daa-d32c-338fbdc5bb66"},"outputs":[{"output_type":"stream","name":"stdout","text":["Descargando el archivo desde: https://raw.githubusercontent.com/GuidoRiosCiaffaroni/ProcesamientoDeDatos/main/csv/kc_house_data.csv\n","--2025-07-30 01:34:15--  https://raw.githubusercontent.com/GuidoRiosCiaffaroni/ProcesamientoDeDatos/main/csv/kc_house_data.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.108.133, 185.199.109.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2515206 (2.4M) [text/plain]\n","Saving to: ‘kc_house_data.csv’\n","\n","kc_house_data.csv   100%[===================>]   2.40M  --.-KB/s    in 0.1s    \n","\n","2025-07-30 01:34:15 (22.7 MB/s) - ‘kc_house_data.csv’ saved [2515206/2515206]\n","\n","\n","Contenido del directorio actual:\n","-rw-r--r-- 1 root root 2.4M Jul 30 01:34 kc_house_data.csv\n"]}],"source":["# ─────────────────────────────────────────────────────────────────────────────\n","# Paso 1: Definición de la URL del archivo CSV en formato \"raw\" de GitHub\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Esta es la dirección directa al archivo CSV alojado en GitHub, en modo \"raw\"\n","# Es decir, permite descargar el archivo de forma directa sin interfaz web\n","csv_raw_url = \"https://raw.githubusercontent.com/GuidoRiosCiaffaroni/ProcesamientoDeDatos/main/csv/kc_house_data.csv\"\n","\n","# Imprime la URL del archivo que se descargará\n","print(f\"Descargando el archivo desde: {csv_raw_url}\")\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# Paso 2: Descarga del archivo CSV desde la URL usando wget\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Ejecuta el comando wget desde la línea de comandos para descargar el archivo CSV\n","# El signo \"!\" permite ejecutar comandos de shell dentro del notebook de Colab\n","!wget {csv_raw_url}\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# Paso 3: Verificación del archivo descargado\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Muestra un mensaje indicando que se listará el contenido del directorio actual\n","print(\"\\nContenido del directorio actual:\")\n","\n","# Lista los archivos del directorio actual con formato legible por humanos (-lh)\n","# Verifica que el archivo 'kc_house_data.csv' se haya descargado correctamente\n","!ls -lh kc_house_data.csv\n"]},{"cell_type":"code","source":["# ────────────────────────────────────────────────────────────────\n","# Importación de librerías esenciales para análisis de datos y visualización\n","# ────────────────────────────────────────────────────────────────\n","\n","# Importa la librería 'pandas' y la asigna como 'pd'\n","# 'pandas' es utilizada para manipulación, limpieza y análisis de datos estructurados (tablas, CSV, Excel, etc.)\n","import pandas as pd\n","\n","# Importa la librería de visualización 'matplotlib.pyplot' y la asigna como 'plt'\n","# Permite crear gráficos básicos como líneas, barras, histogramas y diagramas personalizados\n","import matplotlib.pyplot as plt\n","\n","# Importa la librería 'seaborn' como 'sns'\n","# 'seaborn' es una extensión de matplotlib que facilita la creación de gráficos estadísticos con mejor estética\n","import seaborn as sns\n","\n","\n","# ────────────────────────────────────────────────────────────────\n","# Configuración de estilo gráfico opcional\n","# ────────────────────────────────────────────────────────────────\n","\n","# Establece el estilo gráfico de seaborn para que los gráficos tengan mejor presentación visual\n","sns.set(style=\"whitegrid\")\n","\n","# Configura matplotlib para que los gráficos se muestren directamente en el notebook\n","%matplotlib inline\n","\n","\n"],"metadata":{"id":"UlIFkvvQht81","executionInfo":{"status":"ok","timestamp":1753839256667,"user_tz":240,"elapsed":56,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# ─────────────────────────────────────────────────────────────────────\n","# Paso 1: Cargar el archivo CSV en un DataFrame de pandas\n","# ─────────────────────────────────────────────────────────────────────\n","\n","# Define la ruta local del archivo CSV previamente descargado\n","# En Google Colab, '/content/' es la carpeta raíz por defecto del entorno de ejecución\n","file_path = \"/content/kc_house_data.csv\"\n","\n","# Usa la función read_csv() de pandas para leer el archivo y cargarlo en un DataFrame llamado 'df'\n","df = pd.read_csv(file_path)\n","\n","# ─────────────────────────────────────────────────────────────────────\n","# Paso 2: Inspección inicial del DataFrame\n","# ─────────────────────────────────────────────────────────────────────\n","\n","# Muestra las primeras 5 filas del DataFrame\n","# Esto permite revisar rápidamente la estructura de los datos: columnas, tipos de variables y ejemplos de valores\n","df.head()\n","\n","# ─────────────────────────────────────────────────────────────────────\n","# Paso 3: Resumen general del dataset (complementario)\n","# ─────────────────────────────────────────────────────────────────────\n","\n","# Muestra información resumida del DataFrame, incluyendo número de filas, columnas, tipos de datos y memoria usada\n","df.info()\n","\n","# Muestra estadísticas descriptivas básicas para columnas numéricas (conteo, media, desviación estándar, etc.)\n","df.describe()\n","\n","# Lista los nombres de todas las columnas disponibles\n","print(\"Columnas disponibles en el DataFrame:\")\n","print(df.columns.tolist())\n","\n","# Revisa si existen valores nulos en alguna columna\n","print(\"\\nValores nulos por columna:\")\n","print(df.isnull().sum())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N2C8hFXVnBls","executionInfo":{"status":"ok","timestamp":1753839257072,"user_tz":240,"elapsed":415,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"3cfd04d1-3b50-4b85-e2b4-bde6fd4d3415"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 21613 entries, 0 to 21612\n","Data columns (total 21 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   id             21613 non-null  int64  \n"," 1   date           21613 non-null  object \n"," 2   price          21613 non-null  float64\n"," 3   bedrooms       21613 non-null  int64  \n"," 4   bathrooms      21613 non-null  float64\n"," 5   sqft_living    21613 non-null  int64  \n"," 6   sqft_lot       21613 non-null  int64  \n"," 7   floors         21613 non-null  float64\n"," 8   waterfront     21613 non-null  int64  \n"," 9   view           21613 non-null  int64  \n"," 10  condition      21613 non-null  int64  \n"," 11  grade          21613 non-null  int64  \n"," 12  sqft_above     21613 non-null  int64  \n"," 13  sqft_basement  21613 non-null  int64  \n"," 14  yr_built       21613 non-null  int64  \n"," 15  yr_renovated   21613 non-null  int64  \n"," 16  zipcode        21613 non-null  int64  \n"," 17  lat            21613 non-null  float64\n"," 18  long           21613 non-null  float64\n"," 19  sqft_living15  21613 non-null  int64  \n"," 20  sqft_lot15     21613 non-null  int64  \n","dtypes: float64(5), int64(15), object(1)\n","memory usage: 3.5+ MB\n","Columnas disponibles en el DataFrame:\n","['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15']\n","\n","Valores nulos por columna:\n","id               0\n","date             0\n","price            0\n","bedrooms         0\n","bathrooms        0\n","sqft_living      0\n","sqft_lot         0\n","floors           0\n","waterfront       0\n","view             0\n","condition        0\n","grade            0\n","sqft_above       0\n","sqft_basement    0\n","yr_built         0\n","yr_renovated     0\n","zipcode          0\n","lat              0\n","long             0\n","sqft_living15    0\n","sqft_lot15       0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# ─────────────────────────────────────────────────────────────────────────────\n","# FUNCIÓN: analisis_inicial()\n","# Descripción: Realiza un análisis exploratorio básico sobre un DataFrame.\n","# Incluye estructura, valores nulos, estadísticas descriptivas,\n","# histograma de precios y matriz de correlación. Guarda gráficos como PNG.\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","def analisis_inicial(df):\n","    # Diccionario para almacenar los resultados del análisis\n","    resultados = {}\n","\n","    # ───────────── 1. Dimensiones y tipos de columnas ─────────────\n","    resultados['shape'] = df.shape\n","    resultados['column_types'] = df.dtypes\n","\n","    # ───────────── 2. Conteo de valores nulos ─────────────\n","    resultados['missing_values'] = df.isnull().sum()\n","\n","    # ───────────── 3. Estadísticas descriptivas ─────────────\n","    resultados['describe'] = df.describe()\n","\n","    # ───────────── 4. Histograma de precios ─────────────\n","    if 'price' in df.columns:\n","        plt.figure(figsize=(10, 5))\n","        sns.histplot(df['price'], bins=50, kde=True, color=\"skyblue\")\n","        plt.title('Distribución de Precios de Viviendas')\n","        plt.xlabel('Precio')\n","        plt.ylabel('Frecuencia')\n","        plt.tight_layout()\n","        plt.savefig(\"/content/histograma_precios.png\")\n","        plt.close()\n","    else:\n","        print(\"⚠️ Advertencia: La columna 'price' no existe en el DataFrame.\")\n","\n","    # ───────────── 5. Matriz de correlación ─────────────\n","    corr = df.corr(numeric_only=True)\n","    if not corr.empty:\n","        plt.figure(figsize=(12, 10))\n","        sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\", square=True)\n","        plt.title('Matriz de Correlación entre Variables Numéricas')\n","        plt.tight_layout()\n","        plt.savefig(\"/content/matriz_correlacion.png\")\n","        plt.close()\n","    else:\n","        print(\"⚠️ Advertencia: No hay columnas numéricas para calcular la correlación.\")\n","\n","    return resultados\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# EJECUCIÓN DEL ANÁLISIS EXPLORATORIO SOBRE EL DATAFRAME 'df'\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Ejecuta la función de análisis y guarda los resultados en un diccionario\n","resultados_eda = analisis_inicial(df)\n","\n","# ─────────────────────────────────────────────────────────────────────────────\n","# VISUALIZACIÓN DE RESULTADOS EN CONSOLA (sin ace_tools)\n","# ─────────────────────────────────────────────────────────────────────────────\n","\n","# Imprime estadísticas descriptivas de columnas numéricas\n","print(\"📊 Estadísticas descriptivas:\")\n","print(resultados_eda[\"describe\"])\n","\n","# Imprime cantidad de valores nulos por columna\n","print(\"\\n🧯 Valores nulos por columna:\")\n","print(resultados_eda[\"missing_values\"])\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cf5WKrL6nOvQ","executionInfo":{"status":"ok","timestamp":1753839260762,"user_tz":240,"elapsed":3680,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"35beee4b-7a4e-43f1-afc8-b090780d559f"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["📊 Estadísticas descriptivas:\n","                 id         price      bedrooms     bathrooms   sqft_living  \\\n","count  2.161300e+04  2.161300e+04  21613.000000  21613.000000  21613.000000   \n","mean   4.580302e+09  5.400881e+05      3.370842      2.114757   2079.899736   \n","std    2.876566e+09  3.671272e+05      0.930062      0.770163    918.440897   \n","min    1.000102e+06  7.500000e+04      0.000000      0.000000    290.000000   \n","25%    2.123049e+09  3.219500e+05      3.000000      1.750000   1427.000000   \n","50%    3.904930e+09  4.500000e+05      3.000000      2.250000   1910.000000   \n","75%    7.308900e+09  6.450000e+05      4.000000      2.500000   2550.000000   \n","max    9.900000e+09  7.700000e+06     33.000000      8.000000  13540.000000   \n","\n","           sqft_lot        floors    waterfront          view     condition  \\\n","count  2.161300e+04  21613.000000  21613.000000  21613.000000  21613.000000   \n","mean   1.510697e+04      1.494309      0.007542      0.234303      3.409430   \n","std    4.142051e+04      0.539989      0.086517      0.766318      0.650743   \n","min    5.200000e+02      1.000000      0.000000      0.000000      1.000000   \n","25%    5.040000e+03      1.000000      0.000000      0.000000      3.000000   \n","50%    7.618000e+03      1.500000      0.000000      0.000000      3.000000   \n","75%    1.068800e+04      2.000000      0.000000      0.000000      4.000000   \n","max    1.651359e+06      3.500000      1.000000      4.000000      5.000000   \n","\n","              grade    sqft_above  sqft_basement      yr_built  yr_renovated  \\\n","count  21613.000000  21613.000000   21613.000000  21613.000000  21613.000000   \n","mean       7.656873   1788.390691     291.509045   1971.005136     84.402258   \n","std        1.175459    828.090978     442.575043     29.373411    401.679240   \n","min        1.000000    290.000000       0.000000   1900.000000      0.000000   \n","25%        7.000000   1190.000000       0.000000   1951.000000      0.000000   \n","50%        7.000000   1560.000000       0.000000   1975.000000      0.000000   \n","75%        8.000000   2210.000000     560.000000   1997.000000      0.000000   \n","max       13.000000   9410.000000    4820.000000   2015.000000   2015.000000   \n","\n","            zipcode           lat          long  sqft_living15     sqft_lot15  \n","count  21613.000000  21613.000000  21613.000000   21613.000000   21613.000000  \n","mean   98077.939805     47.560053   -122.213896    1986.552492   12768.455652  \n","std       53.505026      0.138564      0.140828     685.391304   27304.179631  \n","min    98001.000000     47.155900   -122.519000     399.000000     651.000000  \n","25%    98033.000000     47.471000   -122.328000    1490.000000    5100.000000  \n","50%    98065.000000     47.571800   -122.230000    1840.000000    7620.000000  \n","75%    98118.000000     47.678000   -122.125000    2360.000000   10083.000000  \n","max    98199.000000     47.777600   -121.315000    6210.000000  871200.000000  \n","\n","🧯 Valores nulos por columna:\n","id               0\n","date             0\n","price            0\n","bedrooms         0\n","bathrooms        0\n","sqft_living      0\n","sqft_lot         0\n","floors           0\n","waterfront       0\n","view             0\n","condition        0\n","grade            0\n","sqft_above       0\n","sqft_basement    0\n","yr_built         0\n","yr_renovated     0\n","zipcode          0\n","lat              0\n","long             0\n","sqft_living15    0\n","sqft_lot15       0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# ───────────────────────────────────────────────────────────────\n","# Librerías necesarias\n","# ───────────────────────────────────────────────────────────────\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Estilo visual de seaborn\n","sns.set(style=\"whitegrid\")\n","%matplotlib inline\n","\n","# ───────────────────────────────────────────────────────────────\n","# FUNCIÓN: listar_columnas()\n","# Lista e imprime todas las columnas de un DataFrame.\n","# ───────────────────────────────────────────────────────────────\n","\n","def listar_columnas(df):\n","    \"\"\"\n","    Lista y muestra todas las columnas del DataFrame.\n","\n","    Parámetro:\n","    - df : pandas.DataFrame\n","\n","    Retorna:\n","    - list : Lista con los nombres de las columnas\n","    \"\"\"\n","    columnas = df.columns.tolist()\n","    print(\" Columnas disponibles en el DataFrame:\")\n","    for i, col in enumerate(columnas, start=1):\n","        print(f\"{i}. {col}\")\n","    return columnas\n","\n","# ───────────────────────────────────────────────────────────────\n","# Cargar archivo CSV (asegúrate de haberlo descargado antes)\n","# ───────────────────────────────────────────────────────────────\n","#file_path = \"/content/kc_house_data.csv\"\n","#df = pd.read_csv(file_path)\n","\n","\n","# ───────────────────────────────────────────────────────────────\n","# Listar columnas del DataFrame\n","# ───────────────────────────────────────────────────────────────\n","_ = listar_columnas(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5a2VoDXMuTHF","executionInfo":{"status":"ok","timestamp":1753839260831,"user_tz":240,"elapsed":58,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}},"outputId":"d08b9510-c622-4fea-94cb-9b412772a709"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":[" Columnas disponibles en el DataFrame:\n","1. id\n","2. date\n","3. price\n","4. bedrooms\n","5. bathrooms\n","6. sqft_living\n","7. sqft_lot\n","8. floors\n","9. waterfront\n","10. view\n","11. condition\n","12. grade\n","13. sqft_above\n","14. sqft_basement\n","15. yr_built\n","16. yr_renovated\n","17. zipcode\n","18. lat\n","19. long\n","20. sqft_living15\n","21. sqft_lot15\n"]}]},{"cell_type":"code","source":["# ───────────────────────────────────────────────────────────────\n","# Paso 1: Subir el archivo desde tu equipo\n","# ───────────────────────────────────────────────────────────────\n","from google.colab import files\n","uploaded = files.upload()  # Selecciona el archivo kc_house_data.csv cuando se abra el diálogo\n","\n","# ───────────────────────────────────────────────────────────────\n","# Paso 2: Verificar el nombre del archivo subido\n","# ───────────────────────────────────────────────────────────────\n","import os\n","file_path = list(uploaded.keys())[0]  # toma automáticamente el nombre del archivo subido\n","\n","# ───────────────────────────────────────────────────────────────\n","# Paso 3: Importar librerías necesarias\n","# ───────────────────────────────────────────────────────────────\n","import pandas as pd\n","import numpy as np\n","import scipy.stats as stats\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import statsmodels.formula.api as smf\n","\n","# ───────────────────────────────────────────────────────────────\n","# Paso 4: Función para análisis estadístico completo sobre 'price'\n","# ───────────────────────────────────────────────────────────────\n","def analizar_columna_price(file_path):\n","    df = pd.read_csv(file_path)\n","\n","    if 'price' not in df.columns:\n","        print(\"❌ Error: La columna 'price' no se encuentra en el archivo.\")\n","        return\n","\n","    price = df['price'].dropna()\n","    print(\"📊 Análisis Estadístico de la Columna 'price'\\n\")\n","\n","    print(f\"1. Media: {price.mean():,.2f}\")\n","    print(f\"2. Mediana: {price.median():,.2f}\")\n","    moda = price.mode()\n","    print(f\"3. Moda: {moda.iloc[0]:,.2f}\" if not moda.empty else \"3. Moda: No disponible\")\n","    print(f\"4. Varianza: {price.var():,.2f}\")\n","    print(f\"5. Desviación estándar: {price.std():,.2f}\")\n","    print(f\"6. Rango: {price.max() - price.min():,.2f}\")\n","    print(f\"7. Coeficiente de variación: {price.std() / price.mean():.4f}\")\n","\n","    print(\"\\n8. Correlación de Pearson con otras variables numéricas:\")\n","    print(df.corr(numeric_only=True)['price'].drop('price').round(4))\n","\n","    print(\"\\n9. Covarianza con otras variables numéricas:\")\n","    print(df.cov(numeric_only=True)['price'].drop('price').round(2))\n","\n","    print(\"\\n10. Distribución normal: gráfico guardado como 'distribucion_normal_price.png'\")\n","    plt.figure(figsize=(10,6))\n","    sns.histplot(price, kde=True, stat=\"density\", bins=50, color='skyblue')\n","    xmin, xmax = plt.xlim()\n","    x = np.linspace(xmin, xmax, 100)\n","    p = stats.norm.pdf(x, price.mean(), price.std())\n","    plt.plot(x, p, 'r', linewidth=2)\n","    plt.title(\"Distribución de precios con curva normal\")\n","    plt.xlabel(\"Precio\")\n","    plt.ylabel(\"Densidad\")\n","    plt.tight_layout()\n","    plt.savefig(\"distribucion_normal_price.png\")\n","    plt.close()\n","\n","    print(\"\\n11. Percentiles:\")\n","    print(f\"   25%: {np.percentile(price, 25):,.2f}\")\n","    print(f\"   50%: {np.percentile(price, 50):,.2f}\")\n","    print(f\"   75%: {np.percentile(price, 75):,.2f}\")\n","\n","    ci_low, ci_high = stats.norm.interval(0.95, loc=price.mean(), scale=price.sem())\n","    print(f\"\\n12. Intervalo de confianza al 95%: ({ci_low:,.2f}, {ci_high:,.2f})\")\n","\n","    t_stat, p_val = stats.ttest_1samp(price, 500000)\n","    print(f\"\\n13. Prueba de hipótesis (media = 500,000):\")\n","    print(f\"   Estadístico t: {t_stat:.4f}\")\n","    print(f\"   Valor p: {p_val:.4e}\")\n","\n","    print(f\"\\n14. Skewness (asimetría): {stats.skew(price):.4f}\")\n","    print(f\"15. Kurtosis: {stats.kurtosis(price):.4f}\")\n","\n","    if 'sqft_living' in df.columns:\n","        modelo = smf.ols('price ~ sqft_living', data=df).fit()\n","        print(\"\\n16. Regresión lineal (price ~ sqft_living):\")\n","        print(\"   Parámetros:\")\n","        print(modelo.params.round(2))\n","        print(f\"   R-cuadrado: {modelo.rsquared:.4f}\")\n","        print(\"   Valores p:\")\n","        print(modelo.pvalues.round(4))\n","    else:\n","        print(\"\\n16. No se puede realizar regresión: columna 'sqft_living' no encontrada.\")\n","\n","# ───────────────────────────────────────────────────────────────\n","# Paso 5: Ejecutar análisis\n","# ───────────────────────────────────────────────────────────────\n","analizar_columna_price(file_path)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"phs1Ihkdw7j-","outputId":"64dcedeb-a43d-4a41-c750-c6e422990a20","executionInfo":{"status":"ok","timestamp":1753840849004,"user_tz":240,"elapsed":1588176,"user":{"displayName":"Guido Rios","userId":"10562185620794585819"}}},"execution_count":60,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-2e9e4cca-ea3f-494a-ab0d-ebd35879a350\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-2e9e4cca-ea3f-494a-ab0d-ebd35879a350\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kc_house_data.csv to kc_house_data (1).csv\n","📊 Análisis Estadístico de la Columna 'price'\n","\n","1. Media: 540,088.14\n","2. Mediana: 450,000.00\n","3. Moda: 350,000.00\n","4. Varianza: 134,782,378,397.25\n","5. Desviación estándar: 367,127.20\n","6. Rango: 7,625,000.00\n","7. Coeficiente de variación: 0.6798\n","\n","8. Correlación de Pearson con otras variables numéricas:\n","id              -0.0168\n","bedrooms         0.3083\n","bathrooms        0.5251\n","sqft_living      0.7020\n","sqft_lot         0.0897\n","floors           0.2568\n","waterfront       0.2664\n","view             0.3973\n","condition        0.0364\n","grade            0.6674\n","sqft_above       0.6056\n","sqft_basement    0.3238\n","yr_built         0.0540\n","yr_renovated     0.1264\n","zipcode         -0.0532\n","lat              0.3070\n","long             0.0216\n","sqft_living15    0.5854\n","sqft_lot15       0.0824\n","Name: price, dtype: float64\n","\n","9. Covarianza con otras variables numéricas:\n","id              -1.770198e+13\n","bedrooms         1.052863e+05\n","bathrooms        1.484815e+05\n","sqft_living      2.367154e+08\n","sqft_lot         1.363437e+09\n","floors           5.090800e+04\n","waterfront       8.460640e+03\n","view             1.117730e+05\n","condition        8.687030e+03\n","grade            2.880265e+05\n","sqft_above       1.841014e+08\n","sqft_basement    5.261406e+07\n","yr_built         5.824484e+05\n","yr_renovated     1.864486e+07\n","zipcode         -1.045072e+06\n","lat              1.561742e+04\n","long             1.118120e+03\n","sqft_living15    1.472964e+08\n","sqft_lot15       8.264591e+08\n","Name: price, dtype: float64\n","\n","10. Distribución normal: gráfico guardado como 'distribucion_normal_price.png'\n","\n","11. Percentiles:\n","   25%: 321,950.00\n","   50%: 450,000.00\n","   75%: 645,000.00\n","\n","12. Intervalo de confianza al 95%: (535,193.66, 544,982.63)\n","\n","13. Prueba de hipótesis (media = 500,000):\n","   Estadístico t: 16.0530\n","   Valor p: 1.1736e-57\n","\n","14. Skewness (asimetría): 4.0238\n","15. Kurtosis: 34.5773\n","\n","16. Regresión lineal (price ~ sqft_living):\n","   Parámetros:\n","Intercept     -43580.74\n","sqft_living      280.62\n","dtype: float64\n","   R-cuadrado: 0.4929\n","   Valores p:\n","Intercept      0.0\n","sqft_living    0.0\n","dtype: float64\n"]}]}]}